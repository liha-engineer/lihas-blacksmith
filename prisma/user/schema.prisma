// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "./generated/userDataClient"
}

datasource userdb {
  provider = "mysql"
  url      = env("USERDB_URL")
}

model Account {
  accountId Int @id @default(autoincrement()) 
  id String @unique 
  name String 
  password String 
  createdAt DateTime @default(now()) 

  characters Characters[]
  @@map("accounts")
}

model Characters {
  characterId Int @id @default(autoincrement()) 
  accountId Int 
  characterName String @unique 
  hp Int @default(500) 
  atk Int @default(100) 
  money Int @default(10000) 
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 

  account Account @relation(fields: [accountId], references: [accountId], onDelete: Cascade, onUpdate: Cascade)
  inventory Inventory[]
  equippeditem EquippedItem[]
  @@map("characters")
}

// 얘는 큰 배낭 하나고
model Inventory { 
  inventoryId Int @id @default(autoincrement())
  characterId Int 

  characters Characters @relation(fields: [characterId], references: [characterId], onDelete : Cascade, onUpdate: Cascade)
  inventoryitem InventoryItem[]
  @@map("inventory")
}

// 인벤토리 격자 한칸
model InventoryItem {
  inventoryItemId Int @id @default(autoincrement())
  inventoryId Int
  itemId Int 
  itemCount Int

  inventory Inventory @relation(fields: [inventoryId], references: [inventoryId], onDelete: Cascade, onUpdate: Cascade)
  @@map("inventoryitems")
}


model EquippedItem {
  equippedItemId Int @id @default(autoincrement()) 
  characterId Int 
  equippedItemName String 
  
  characters Characters @relation(fields: [characterId], references : [characterId], onDelete : Cascade, onUpdate: Cascade)
  @@map("equippeditems")
}
